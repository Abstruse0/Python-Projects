
# Log - Start at 4 a.m  - End at 7:40 a.m 12/18/23

# Log - Start at 1 a.m  - End at 7:40 a.m, 1-hour break, continued for almost 2 more hours 10:11 a.m  12/19/23

# Short Term
    # Add enemies to the game
    # Add a health bar that follows the player, and a health bar that follows the enemies
    # Add collisions 
    # Add Damage/Health to Instantiations of player

    # Create a delay in between each shot / Checked - Create a var called Bullet_delay, and last_shot_time = pygame.time.get_ticks() - It will count the ticks, 
        # then you pass last_shot_time to main and make it global, from there, you only allow bullets to fire if key_down and current_time - last_shot_time > bullet_delay
        # after that, you put last_shot_time at the end of the lines, and you can set the timer as you like.

    # Understand the classes, how they move, how they update, how they work alongside eachother.
    # Add sound effects that go off whenever player shoots and Music / Checked - sound = pygame.mixer.Sound("filedest") sound.play(-1) for infinite

# Long Term
    # Find a way to spawn infinite enemies in rounds. 
    # Add Power Ups
    # Create obstacles that can be destroyed and kill player upon Collison, make them moveable to attack player. 
    # if 3 walls collide, a boss spawns in middle of the screen perhaps

# for player rotation: In the player class, create a method that rotates self.image only if keypressed = true + current_time - last_rotation_time > rotate_delay

import pygame
import math
import time

pygame.init()
pygame.font.init()
width = 1600
height = 800
Window = pygame.display.set_mode((width, height))

bg = pygame.image.load("PixelBack.jpg")

last_shot_time = pygame.time.get_ticks()

last_rotation_time = 0

Num_Checker = 0


bullet_delay = 200  # Delay in milliseconds


# Sounds 
Effect1 = pygame.mixer.Sound('laser-sound-fx_B_major.wav')
Effect1.set_volume(0.10)
Music = pygame.mixer.Sound('streetfight.mp3.mp3')
Music.set_volume(.10)

class Player(pygame.sprite.Sprite):
    def __init__(self):
        

        super().__init__()
        self.image = pygame.transform.rotate(pygame.image.load("spaceship.png"), (270))
        self.rect = self.image.get_rect(center=(width/2, height/2))
        

    def update(self):
        # Rotate delay = x amount, last_rotation_time = 0, current_time = pygame.time.get_ticks() current_time - last_rotation_time > rotate_delay: 
        # This logic makes it so that you can only rotate every so often. This avoid the counter constantly ticking and spinning without any control for the player
        # This logic can also be applied to bullets to create a delay between inputs.
        global rotate_delay
        #This determines where the rectangle is. In this case, it is at your center of mouse x and y coordinates
        self.rect.center = pygame.mouse.get_pos()

        key = pygame.key.get_pressed()
        global last_rotation_time
        # Time delay between rotations
        rotate_delay = 150 
        # Counts the time between each action
        current_time = pygame.time.get_ticks()
        # If current_time - last_rotation_time > rotate delay means that both conditions must be true to continue. This creates a buffer to stop constant rotation
        if key[pygame.K_w] and current_time - last_rotation_time > rotate_delay:
                self.rotate()
                # resets timer so that x milliseconds must pass before next input is allowed
                last_rotation_time = current_time

    #A method that returns bullet at center of mouse x and y
    def create_bullet(self):

        return Bullet(pygame.mouse.get_pos()[0],pygame.mouse.get_pos()[1])

    # A class that allows for rotation, must be sent to update class to work
    def rotate(self):
        #Used to keep number from updating within update class upon key press
        global Num_Checker

        key = pygame.key.get_pressed()

        # Loops upon reaching 4, reaches 4 upon 4 key presses within the update method. This allows one to assign a direction to a number,
        # and allows one to move continuously rotate
        if key[pygame.K_w]:
            Num_Checker+=1
            # Resets number to 1 upon exceeding 4, and loop restarts
            if Num_Checker == 5:
                  Num_Checker = 1
            # rotates image upon key press, and upon holding key press since this method is sent to the update method.      
            self.image = pygame.transform.rotate(self.image, 90)
            
                   
            # This is here to make sure the direction is in accordance with your numbers
            print(Num_Checker)

# A class made to creat a bullet object
class Bullet(pygame.sprite.Sprite):
    global Num_Checker
    # pos_x and pos_y are args from the player.create_bullet() method that has been passed into this class
    def __init__(self, pos_x, pos_y):
        super().__init__()
        # Creates a surface, in this case a bullet
        self.image = pygame.Surface((15,12))
        # fills image with a color
        self.image.fill((255,0,30))
        # Makes bullet spawn atop the player's mouse position
        self.rect = self.image.get_rect(center=(pos_x, pos_y))
        # looks at rect position which is derived by Player class method return bullet that is then passed into pos_x and pos_y method as *args
        # Upon identifying number, the number which determines where they will face, the rectangle will position accordingly

        # A set of comparisons that allow for rect to determine where to be based on character position.

        if Num_Checker == 0:
            self.rect = self.image.get_rect(center=(pos_x+75, pos_y))

        if Num_Checker == 1:
            self.rect = self.image.get_rect(center=(pos_x, pos_y-75))

        if Num_Checker == 2:
            self.rect = self.image.get_rect(center=(pos_x-75, pos_y))

        if Num_Checker == 3:
            self.rect = self.image.get_rect(center=(pos_x, pos_y+75))

        if Num_Checker == 4:
            self.rect = self.image.get_rect(center=(pos_x+75, pos_y))

    # Updates the screen to recognize bullet movement per fps
    def update(self):
        self.count = Num_Checker
        #Initalizer: Exists until player enters a loop by pressing key
        if Num_Checker == 0:
            self.rect.x += 9

        # moves bullet based on where player is looking; Got stuck here because I put a key press when unneccessary. 
        if Num_Checker == 1:
                        self.rect.y -= 9

        if Num_Checker == 2:
                            self.rect.x -= 9

        if Num_Checker == 3:
                            self.rect.y += 9

        if Num_Checker == 4:
                            self.rect.x += 9


        # destroys bullet whenever it leaves the width or height of the screen
        if self.rect.x > width or self.rect.y > height or self.rect.y < 0 or self.rect.x < 0:
            self.kill()

def draw():
    #draws background
    Window.blit(bg,(0,0))
    #draws both groups onto window
    player_group.draw(Window)
    Bullet_Group.draw(Window)
    #Updates both groups
    player_group.update()
    Bullet_Group.update()
    #Makes mouse cursor invisible
    pygame.mouse.set_visible(False)
    # Updates content on screen
    pygame.display.flip() 
    pygame.display.update()

# Instantiations
player = Player()

# A class that allows you to draw multiple objects at once
player_group = pygame.sprite.Group()
# A way to make the instantiation of player align with the player classes attributes/methods
player_group.add(player)

# A class that allows you to draw multiple objects at once
Bullet_Group = pygame.sprite.Group()




def main():
    global last_shot_time
    global x
    global bullet_count
    Bullet_List = []
    run = True
    #Plays music, (-1) makes it run infinitely
    Music.play(-1)
    # counts frames
    Time = pygame.time.Clock()
    key = pygame.key.get_pressed()

    x = 0
    while run:
        Time.tick(240)

        draw()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()

            current_time = pygame.time.get_ticks()
            # if a key is pressed, event.key captures that input, in this case, it creates a delay everytime bullet is creayted
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and current_time - last_shot_time > bullet_delay:
                    # Creates bullet by adding player bullet to bullet group
                    Bullet_Group.add(player.create_bullet())
                    # plays upon every key press

                    Effect1.play()
                    last_shot_time = current_time 



main()
